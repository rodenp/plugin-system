@startuml Plugin System Database ERD
!theme blueprint
skinparam backgroundColor white
skinparam classAttributeIconSize 0
skinparam class {
    BackgroundColor<<User>> LightBlue
    BackgroundColor<<Community>> LightGreen
    BackgroundColor<<Content>> LightCoral
    BackgroundColor<<Course>> LightGoldenRodYellow
    BackgroundColor<<Junction>> LightGray
}

title Plugin System Database Schema

' User entity
class User <<User>> {
    + id : String <<PK>>
    + username : String <<UNIQUE>>
    + email : String <<UNIQUE>>
    + displayName : String
    + bio : String?
    + avatar : String?
    + level : Int = 1
    + pointsToNext : Int = 100
    + joinDate : DateTime
    + createdAt : DateTime
    + updatedAt : DateTime
}

' Community entity
class Community <<Community>> {
    + id : String <<PK>>
    + name : String
    + description : String?
    + type : String = "free"
    + memberCount : Int = 0
    + ownerId : String <<FK>>
    + createdAt : DateTime
    + updatedAt : DateTime
}

' Post entity
class Post <<Content>> {
    + id : String <<PK>>
    + authorId : String <<FK>>
    + author : String
    + content : String
    + likes : Int = 0
    + comments : Int = 0
    + isPinned : Boolean = false
    + level : Int = 1
    + communityId : String <<FK>>
    + category : String = "general"
    + commentersCount : Int = 0
    + newCommentTimeAgo : String?
    + createdAt : DateTime
    + updatedAt : DateTime
}

' Comment entity
class Comment <<Content>> {
    + id : String <<PK>>
    + postId : String <<FK>>
    + authorId : String <<FK>>
    + author : String
    + content : String
    + createdAt : DateTime
    + updatedAt : DateTime
}

' Course entity
class Course <<Course>> {
    + id : String <<PK>>
    + title : String
    + description : String?
    + authorId : String <<FK>>
    + communityId : String <<FK>>
    + createdAt : DateTime
    + updatedAt : DateTime
    + lastSaved : DateTime
}

' Module entity
class Module <<Course>> {
    + id : String <<PK>>
    + title : String
    + description : String?
    + courseId : String <<FK>>
    + order : Int = 0
    + createdAt : DateTime
    + updatedAt : DateTime
}

' Lesson entity
class Lesson <<Course>> {
    + id : String <<PK>>
    + title : String
    + content : String?
    + type : String = "text"
    + moduleId : String <<FK>>
    + order : Int = 0
    + duration : Int?
    + isCompleted : Boolean = false
    + createdAt : DateTime
    + updatedAt : DateTime
}

' PostLike junction table
class PostLike <<Junction>> {
    + postId : String <<PK/FK>>
    + userId : String <<PK/FK>>
    + createdAt : DateTime
}

' Define relationships
User "1" -- "*" Community : owns >
User "1" -- "*" Post : authors >
User "1" -- "*" Comment : writes >
User "1" -- "*" Course : creates >
User "*" -- "*" Post : likes
(User, Post) .. PostLike

Community "1" -- "*" Post : contains >
Community "1" -- "*" Course : hosts >

Post "1" -- "*" Comment : has >

Course "1" -- "*" Module : contains >
Module "1" -- "*" Lesson : contains >

' Add notes for foreign keys
note right of Community::ownerId
    FK → User.id
end note

note right of Post::authorId
    FK → User.id
end note

note right of Post::communityId
    FK → Community.id
end note

note right of Comment::postId
    FK → Post.id
end note

note right of Comment::authorId
    FK → User.id
end note

note right of Course::authorId
    FK → User.id
end note

note right of Course::communityId
    FK → Community.id
end note

note right of Module::courseId
    FK → Course.id
end note

note right of Lesson::moduleId
    FK → Module.id
end note

note right of PostLike
    Composite PK: (postId, userId)
    Junction table for User ↔ Post
end note

@enduml